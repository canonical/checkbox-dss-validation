id: intel_gpu/check_host_gpu_avail
category_id: dss-regress
flags: simple
requires: executable.name == 'intel_gpu_top'
_summary: Verify that an Intel GPU is available on the host
estimated_duration: 5s
command:
  result=$(intel_gpu_top -L)
  if [[ ${result} == *"pci:vendor=8086"* ]]; then
      echo "Test success: Intel GPU available on host: ${result}"
  else
      >&2 echo "Test failure: "intel_gpu_top -L" reports no Intel GPUs: ${result}"
      exit 1
  fi

id: intel_gpu_plugin/install_intel_gpu_plugin
category_id: dss-regress
flags: simple
requires: executable.name == 'kubectl'
depends: intel_gpu/check_host_gpu_avail
_summary: Install Intel K8s GPU Device Plugin
estimated_duration: 2m
command:
  set -e
  # Using kubectl directly due to this bug: https://github.com/canonical/microk8s/issues/4453
  VERSION=v0.30.0
  # hack as redirecting stdout anywhere but /dev/null throws a permission denied error
  # see: https://forum.snapcraft.io/t/eksctl-cannot-write-to-stdout/17254/4
  kubectl kustomize https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/nfd?ref=${VERSION} | tee /tmp/node_feature_discovery.yaml > /dev/null
  kubectl kustomize https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/nfd/overlays/node-feature-rules?ref=${VERSION} | tee /tmp/node_feature_rules.yaml > /dev/null
  kubectl kustomize https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/gpu_plugin/overlays/nfd_labeled_nodes?ref=${VERSION} | tee /tmp/gpu_plugin.yaml > /dev/null
  sed -i 's/enable-monitoring/enable-monitoring\n        - -shared-dev-num=10/' /tmp/gpu_plugin.yaml
  kubectl apply -f /tmp/node_feature_discovery.yaml
  kubectl apply -f /tmp/node_feature_rules.yaml
  kubectl apply -f /tmp/gpu_plugin.yaml
  sleep 5
  kubectl -n node-feature-discovery rollout status ds/nfd-worker
  kubectl -n default rollout status ds/intel-gpu-plugin
  SLEEP_SECS=15
  echo "Info: sleeping for ${SLEEP_SECS} to allow pod status to update for subsequent tests."
  sleep ${SLEEP_SECS}
  echo "Test success: Intel K8s GPU Device Plugin deployed."

id: intel_gpu_plugin/daemonset_check_name
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install_intel_gpu_plugin
_summary: Check DaemonSet Name
estimated_duration: 1s
command:
  set -e
  result=$(microk8s.kubectl get daemonset.apps -o jsonpath='{.items[0].metadata.name}')
  if [ "${result}" = "intel-gpu-plugin" ]; then
      echo "Test success: 'intel-gpu-plugin' daemonset is deployed!"
  else
      >&2 echo "Test failure: expected daemonset name 'intel-gpu-plugin' but got ${result}"
      exit 1
  fi

id: intel_gpu_plugin/daemonset_check_number_available
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install_intel_gpu_plugin
_summary: Check number of available daemonsets
estimated_duration: 1s
command:
  set -e
  SLEEP_SECS=10
  RETRIES=10
  result=$(microk8s.kubectl get daemonset.apps -o jsonpath='{.items[0].status.numberAvailable}')
  retry_cnt=0
  while [ -z "${result}" ]; do
      if [ "${retry_cnt}" = "10" ]; then
          >&2 echo "Test failure: empty numberAvailable result after ${retry_cnt} retries."
          exit 1
      fi
      retry_cnt=$((retry_cnt+1))
      echo "Info: received empty numberAvailable result. Sleeping for ${SLEEP_SECS} seconds. Retry $retry_cnt/$RETRIES."
      sleep ${SLEEP_SECS}
      result=$(microk8s.kubectl get daemonset.apps -o jsonpath='{.items[0].status.numberAvailable}')
  done
  if [ "${result}" = "1" ]; then
      echo "Test success: 1 daemonset in numberAvailable status."
  else
      >&2 echo "Test failure: expected numberAvailable to be 1 but got ${result}"
      exit 1
  fi

id: intel_gpu_plugin/daemonset_check_number_ready
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install_intel_gpu_plugin
_summary: Check number of ready daemonsets
estimated_duration: 1s
command:
  set -e
  SLEEP_SECS=10
  RETRIES=10
  result=$(microk8s.kubectl get daemonset.apps -o jsonpath='{.items[0].status.numberReady}')
  retry_cnt=0
  while [ -z "${result}" ]; do
      if [ "${retry_cnt}" = "10" ]; then
          >&2 echo "Test failure: empty numberReady result after ${retry_cnt} retries."
          exit 1
      fi
      retry_cnt=$((retry_cnt+1))
      echo "Info: received empty numberReady result. Sleeping for ${SLEEP_SECS} seconds. Retry $retry_cnt/$RETRIES."
      sleep ${SLEEP_SECS}
      result=$(microk8s.kubectl get daemonset.apps -o jsonpath='{.items[0].status.numberReady}')
  done
  if [ "${result}" = "1" ]; then
      echo "Test success: 1 daemonset in numberReady status."
  else
      >&2 echo "Test failure: expected numberReady to be 1 but got ${result}"
      exit 1
  fi

# TODO: add node label checks

id: intel_gpu_plugin/dss_initialize
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install_intel_gpu_plugin
_summary: Initialize DSS environment with common k8s manifests
estimated_duration: 2m
command:
  set -e
  DSS_COMMON_MANIFESTS=/tmp/data-science-stack/poc/common-manifests
  sudo microk8s.kubectl apply -f ${DSS_COMMON_MANIFESTS}/namespace.yaml
  sudo microk8s.kubectl apply -f ${DSS_COMMON_MANIFESTS}/mlflow.yaml
  sudo microk8s.kubectl apply -f ${DSS_COMMON_MANIFESTS}/notebooks.yaml
  sudo microk8s.kubectl wait --for condition=available --timeout 1200s -n dss deployment -l app=dss-mlflow
  echo "Test success: common DSS manifests deployed."

id: intel_gpu_plugin/dss_check_service_name
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/dss_initialize
_summary: Check Service Name
estimated_duration: 1s
command:
  set -e
  result=$(microk8s.kubectl get service -n dss -o jsonpath='{.items[0].metadata.name}')
  if [ "${result}" = "mlflow" ]; then
      echo "Test success: 'mlflow' service is deployed!"
  else
      >&2 echo "Test failure: expected service name 'mlflow' but got ${result}"
      exit 1
  fi

# TODO: check other service and deployment details

id: itex/check_itex_import
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/dss_initialize
_summary: Check to see if itex can be imported
estimated_duration: 5m
command:
  TIMEOUT=1200s
  DSS_INTEL_MANIFESTS=/tmp/data-science-stack/poc/intel/manifests/
  launch_notebook() {
    local fullname=$1
    local app=$2
    echo -e "\n\$ dss start ${app} notebook"
    sudo microk8s kubectl apply -f ${DSS_INTEL_MANIFESTS}/notebook-${app}.yaml
    sudo microk8s.kubectl wait \
      --for condition=available \
      --timeout $TIMEOUT \
      -n dss\
      deployment \
      -l app=user-notebook-${fullname}
    echo -e "\n\$ dss status"
    MLFLOW_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      mlflow)
    NOTEBOOK_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      user-notebook-${fullname})
    echo "DSS has started successfully!"
  }
  remove_itex() {
    echo "Removing ITEX"
    sudo microk8s.kubectl delete -n dss deployment.apps/notebook-tensorflow
    sudo microk8s.kubectl delete -n dss service/user-notebook-tensorflow
  }
  launch_notebook tensorflow itex
  echo "Starting itex import test"
  pod=$(kubectl get pods -n dss -o=jsonpath='{.items..metadata.name}' | grep -o 'notebook-tensorflow.*')
  echo "Found Tensorflow pod: ${pod}"
  sudo microk8s kubectl -n dss exec ${pod} -- python3 -c "import intel_extension_for_tensorflow as itex; import tensorflow; import jupyter"
  if [ "$?" = 0 ]
  then
    echo "PASS: Found module"
    remove_itex
    exit 0
  else
    >&2 echo "FAIL: Did not find ITEX python module"
    remove_itex
    exit 1
  fi

id: ipex/check_ipex_import
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/dss_initialize
_summary: Check to see if ipex can be imported
estimated_duration: 5m
command:
  TIMEOUT=1200s
  DSS_INTEL_MANIFESTS=/tmp/data-science-stack/poc/intel/manifests/
  launch_notebook() {
    local fullname=$1
    local app=$2
    echo -e "\n\$ dss start ${app} notebook"
    sudo microk8s kubectl apply -f ${DSS_INTEL_MANIFESTS}/notebook-${app}.yaml
    echo -e "\n\$ dss ${app} manifest applied"
    sudo microk8s.kubectl wait \
      --for condition=available \
      --timeout $TIMEOUT \
      -n dss\
      deployment \
      -l app=user-notebook-${fullname} > /tmp/ipex_log.txt
    echo -e "\n\$ dss status"
    MLFLOW_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      mlflow)
    NOTEBOOK_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      user-notebook-${fullname})
    echo "DSS has started successfully!"
  }
  remove_ipex() {
    echo "Removing IPEX"
    sudo microk8s.kubectl delete -n dss deployment.apps/notebook-pytorch
    sudo microk8s.kubectl delete -n dss service/user-notebook-pytorch
  }
  launch_notebook pytorch ipex
  echo "Starting ipex import test"
  pod=$(kubectl get pods -n dss -o=jsonpath='{.items..metadata.name}' | grep -o 'notebook-pytorch.*')
  echo "Found PyTorch pod: ${pod}"
  sudo microk8s kubectl -n dss exec ${pod} -- python3 -c "import intel_extension_for_pytorch as ipex; import torch; import jupyter"
  if [ "$?" = 0 ]
  then
    echo "PASS: Found module"
    remove_ipex
    exit 0
  else
    >&2 echo "FAIL: Did not find IPEX python module"
    remove_ipex
    exit 1
  fi

id: ipex/ipex_gpu_avail
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/dss_initialize
_summary: Check IPEX GPU Availability
estimated_duration: 5m
command:
  set -e
  TIMEOUT=1200s
  DSS_INTEL_MANIFESTS=/tmp/data-science-stack/poc/intel/manifests/
  launch_notebook() {
    local fullname=$1
    local app=$2
    echo -e "\n\$ dss start ${app} notebook"
    sudo microk8s kubectl apply -f ${DSS_INTEL_MANIFESTS}/notebook-${app}.yaml
    echo -e "\n\$ dss ${app} manifest applied"
    sudo microk8s.kubectl wait \
      --for condition=available \
      --timeout $TIMEOUT \
      -n dss\
      deployment \
      -l app=user-notebook-${fullname} > /tmp/ipex_log.txt
    echo -e "\n\$ dss status"
    MLFLOW_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      mlflow)
    NOTEBOOK_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      user-notebook-${fullname})
    echo "DSS has started successfully!"
  }
  remove_ipex() {
    echo "Removing IPEX"
    sudo microk8s.kubectl delete -n dss deployment.apps/notebook-pytorch
    sudo microk8s.kubectl delete -n dss service/user-notebook-pytorch
  }
  launch_notebook pytorch ipex
  echo "Starting ipex import test"
  kubectl get pods -n dss -o=jsonpath='{.items..metadata.name}'
  pod=$(kubectl get pods -n dss -o=jsonpath='{.items..metadata.name}' | grep -o 'notebook-pytorch.*')
  echo "Found PyTorch pod: ${pod}"
  gpu_grep_out=$(sudo microk8s kubectl -n dss exec ${pod} -- python3 -c '
  import sys
  import torch
  import intel_extension_for_pytorch as ipex
  print(torch.__version__)
  print(ipex.__version__)
  try:
    [print(f"[{i}]: {torch.xpu.get_device_properties(i)}") for i in range(torch.xpu.device_count())];
    sys.exit(0)
  except Exception:
    print("Encountered an error getting XPU device properties", file=sys.stderr)
    sys.exit(1)
  ' | grep "dev_type=.gpu" 2>&1)
  remove_ipex
  if [[ -z ${gpu_grep_out} ]]; then
    >&2 echo "FAIL: No GPU found"
    exit 1
  else
    echo "PASS: GPU found"
    exit 0
  fi

id: itex/itex_gpu_avail
category_id: dss-regress
flags: simple
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/dss_initialize
_summary: Check ITEX GPU Availability
estimated_duration: 5m
command:
  TIMEOUT=1200s
  DSS_INTEL_MANIFESTS=/tmp/data-science-stack/poc/intel/manifests/
  launch_notebook() {
    local fullname=$1
    local app=$2
    echo -e "\n\$ dss start ${app} notebook"
    sudo microk8s kubectl apply -f ${DSS_INTEL_MANIFESTS}/notebook-${app}.yaml
    sudo microk8s.kubectl wait \
      --for condition=available \
      --timeout $TIMEOUT \
      -n dss\
      deployment \
      -l app=user-notebook-${fullname}
    echo -e "\n\$ dss status"
    MLFLOW_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      mlflow)
    NOTEBOOK_IP=$(sudo microk8s.kubectl get svc \
      -n dss \
      -o jsonpath="{.spec.clusterIP}" \
      user-notebook-${fullname})
    echo "DSS has started successfully!"
  }
  remove_itex() {
    echo "Removing ITEX"
    sudo microk8s.kubectl delete -n dss deployment.apps/notebook-tensorflow
    sudo microk8s.kubectl delete -n dss service/user-notebook-tensorflow
  }
  launch_notebook tensorflow itex
  echo "Starting itex GPU check test"
  pod=$(kubectl get pods -n dss -o=jsonpath='{.items..metadata.name}' | grep -o 'notebook-tensorflow.*')
  echo "Found Tensorflow pod: ${pod}"
  gpu_grep_out=$(sudo microk8s kubectl -n dss exec ${pod} -- python3 -c '
  import intel_extension_for_tensorflow as itex
  import tensorflow as tf
  import jupyter
  devices = tf.config.experimental.list_physical_devices()
  xpu_found = False
  for device_str in devices:
     if "XPU" in device_str:
         xpu_found = True
         break
  if xpu_found:
      print("XPU Found")
  else:
      print("XPU Not Found")
  ' | grep "XPU Found")
  remove_itex
  if [[ -z ${gpu_grep_out} ]]; then
    >&2 echo "ERROR: No XPU found"
    exit 1
  else
    echo "PASS: XPU found"
    exit 0
  fi
